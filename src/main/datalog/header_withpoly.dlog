#lang datalog

context_typed(B,C1) :- lambda(E,V,T,B), context_typed(E,C), lookup(C1,V,T1).
context_typed(E1,C) :- app(E,E1,E2), context_typed(E,C).
context_typed(E2,C) :- app(E,E1,E2), context_typed(E,C). 
context_typed(E1,C) :- match(E,E1,P,B), context_typed(E,C).
context_typed(E2,C) :- match(E,S,E2,B), context_typed(E,C1), pattern_matching_ctx(C,C1,B).
context_typed(B,C1) :- match(E,S,P,B), context_typed(E,C), pattern_matching_ctx(C1,C,B).
context_typed(E1,C) :- pattern_match_list(E,E1,E2), context_typed(E,C).
context_typed(E2,C) :- pattern_match_list(E,E1,E2), context_typed(E,C).
context_typed(E1,C) :- forall_intro(E,E1,A), context_typed(E,C).

typed(X,T) :- lambda(X,V,Tv,B), typed(B,Tb), fun(Tfn,Tv1,Tb1), type_eq(T, Tfn), type_eq(Tv,Tv1), type_eq(Tb,Tb1).
typed(X,T) :- app(X,E1,E2), typed(E1,Te), fun(Te1,T1,T), typed(E2,T11), type_eq(Te,Te1), type_eq(T1,T11).
typed(X,T) :- context_typed(X,C), var(X), lookup(C,X,T).
typed(X,T) :- match(X,S,P,B), typed(S,T1), typed(P,T11), typed(B,T), type_eq(T1,T11).
typed(X,T) :- pattern_match_list(X,E1,E2), typed(E1,T), typed(E2,T1), type_eq(T,T1).
typed(X,T) :- forall_intro(X,E1,A), typed(E1,T1), type_gen(T,A,T11), type_eq(T1,T11).
typed(X,T) :- forall_elim(X,E,A,U), typed(E,T1), type_gen(T1,A,T2), replace(T,U,A,T2).

lookup(C,X,T) :- bind(C,C1,X,T).
lookup(C,X,T) :- bind(C,C1,Y,T1), bind(C1,C2,Z,T2), lookup(C1,X,T).

type(T) :- fun(T,T1,T2), type(T1), type(T2).
type(T) :- forall_intro(E,E1,T).

type_eq(T,U) :- type(T), T=U.
type_eq(T,U) :- type_eq(U,T).
type_eq(T,U) :- type_eq(T,S), type_eq(S,U).
type_eq(T,U) :- fun(T,T1,T2), fun(U,U1,U2), type_eq(T1,U1), type_eq(T2,U2).
type_eq(T,U) :- type_gen(T,A,T1), type_gen(U,B,U1), type_eq(T1,U1).

replace(T,U,A,T1) :- type_eq(A,T1), type(U), T=U.
replace(T,U,A,T1) :- type_eq(A,T1), type_eq(T,U).
replace(T,U,A,T1) :- simple_type(T1), T=T1, type(U), type(A).
replace(T,U,A,T1) :- fun(T1,T2,T3), replace(R2,U,A,T2), replace(R3,U,A,T3), fun(T,R2,R3).
replace(T,U,A,T1) :- type_gen(T1,B,T2), replace(R2,U,A,T2), type_gen(T,B,R2).

typeconstr(X,T) :- match(E,S,X,B), typed(S,T).
